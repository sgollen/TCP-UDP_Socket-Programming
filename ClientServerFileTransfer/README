                          Name: Samaksh Gollen, ID: 20484987

INSTRUCTIONS FOR COMPILING:
- The program can be compiled by executing "make" command.


INSTRUCTIONS FOR RUNNING:
- Please run the nEmulator1 first using ./emulator <receiver's port number> <sender's receiving port number>.
- Next run the sender with appropriate arguments.
- Lastly run the receiver with appropriate arguments.
- server never exits until manually terminated using Ctrl C.
- The project is created and tested on University of Waterloo Student Environment: linux.student.cs.uwaterloo.ca

EMULATOR
Number of parameters: 2
Parameter:
    $1: <receiver's port number>
    $2: <sender's receiving port number>
To run the emulator execute:  ./nEmulator1 $1 $2


SENDER
Number of parameters: 4
Parameter:
    $1: <host address of the receiver>
    $2: <udp port used by the emulator for data>
    $3: <udp port used by the sender for acks>
    $4: <name of the file to be transmitted>
To run the sender execute:  java sender $1 $2 $3 $4

RECEIVER
Number of parameters: 4
Parameter:
    $1: <hostname for the network emulator>
    $2: <UDP port number used by the emulator for acks>
    $3: <UDP port number used to receive data>
    $4: <name of the file>
To run the receiver execute: java receiver $1 $2 $3 "$4"

EXAMPLE EXECUTION: 
- ./nEmulator 1234 1235
- java sender ubuntu1604-006 1236 1234 test.txt
- java receiver ubuntu1604-008 1237 1234 test.txt

THE PROGRAM WAS BUILT AND TESTED ON:
- University of Waterloo student environments
- ubuntu1604-006 is used to run the receiver
- ubuntu1604-008 is used to run the emulator
- ubuntu1604-002 is used to run the sender


VERSION OF MAKE USED:
- GNU Make 4.1
- Built for x86_64-pc-linux-gnu


VERSION OF JAVA COMPILER USED:
- javac 9-internal


REFERENCES: 
- Help from the sample code of TCP/UDP socket programming
  in java from module 2 page 93-102 of the previous version of the 
  course textbook was used.
- docs.oracle.com (Oracle help Center SE 7).


CLARIFICATION ABOUT DESIGN CHOICE:
- Incorrect number of arguments or invalid arguments will cause program to print warning message and exit. Please read
  the instructions carefully as run order matters. eMulator should be run first, then the receiver,and then sender.
  The sender will parse the file by put EACH LINE into a custom packet class, and then send it to the receiver through
  the emulator. The receiver will discard any out of order packet, and send the packet contain the last acked packet
  number to the sender. The sender will only move the sendBase when receive a valid ack, and will ignore all invalid
  or out of place acks(since emulator can delay achs and make them arrive late) sent by the receiver.The sandbase
  variable is moved to (valid ack + 1) upon a valid ach. All sequence number are in mod 32. During transmission, sender
  will using seqnum.log to track all the packets out, and ack.log track all the acks in.  The receiver will use
  arrival.log to track all the packets in. Lastly, sender will send a EOT and wait for the EOT packet from receiver
  before exiting. If a receiver receives an in order EOT packet from the sender, it will send an EOT packet to sender
  and exit. It was stated that EOT are never lost through the emulator.